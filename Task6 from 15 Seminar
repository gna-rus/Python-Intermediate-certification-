# Напишите код, который запускается из командной строки и получает на вход путь до директории на ПК.
# Соберите информацию о содержимом в виде объектов namedtuple.
# Каждый объект хранит:
# ○ имя файла без расширения или название каталога,
# ○ расширение, если это файл,
# ○ флаг каталога,
# ○ название родительского каталога.
# В процессе сбора сохраните данные в текстовый файл используя логирование

import argparse
import os
from collections import namedtuple
import logging

list_of_date = []

FORMAT = '{levelname:<8} - {asctime}. В модуле "{name}" в строке {lineno:03d} функция "{funcName}()" в {created} секунд записала сообщение: {msg}'
logging.basicConfig(format=FORMAT, style='{', filename='project.log.', filemode='w', encoding='utf-8',
                    level=logging.INFO)  # сохранаяю результаты лоиггирования в отдельный файл
logging.basicConfig(level=logging.INFO)  # присвоение уровня логгера
logger = logging.getLogger('Информация о файлах и папках')  # название логгера

def generate_of_namedtuple(directory):
    print(directory)

    global list_of_date
    directory += "\\"
    files = os.listdir(directory)  # список всех файлов по переданной ссылке
    # files = list(os.walk(directory)) # выдаст список всех файлов и папок

    for i in files:
        # проверка, по ссылке находится файл или директория
        parent_dir = lambda path: os.path.abspath(os.path.join(path, os.pardir))
        par_dir = parent_dir(str(directory  + f"{i}"))

        if os.path.isfile(f'{directory}\{i}'):
            list_of_date.append(generate_of_namedtuple_file(str(i), par_dir))
        else:
            generate_of_namedtuple(f'{directory}\{i}') # рекурсия для прохождения по всем папкам
            list_of_date.append(generate_of_namedtuple_folder(str(i), par_dir))



def generate_of_namedtuple_file(file, directory):
    basename, extension = os.path.splitext(file) # извлекаю из названия файла имя файла и его расширение
    Result = namedtuple("File", ["Name", "Type_file", "Parent_directory"])
    res = Result(basename, extension, directory)
    logger.info('Определен файл')
    return res

def generate_of_namedtuple_folder(folder, directory):
    folder = folder[(folder.rfind("\\") +1):] # нахожу название файла по ссылке
    directory = directory.replace("\\\\", "\\")
    Result = namedtuple("Folder", ["Name", "Parent_directory"])
    res = Result(folder, directory)
    logger.info("Определена папка")
    return res


parser = argparse.ArgumentParser(prog='Final certification', description='Task-1', epilog='Returns the different mean')

parser.add_argument('numbers', metavar='N', type=str, nargs='*', help='press some numbers')
parser.add_argument('-ln', metavar='ln', type=str, help='Введите фамилию', default="None")
args = parser.parse_args()

directory = args.ln

# Проверка на существование дирректроии
if os.path.isdir(directory):
    print(directory)
    generate_of_namedtuple(directory)
    for i in list_of_date:
        print(i)
        logger.info(f"\nОпределено:  {i}")
else:
    logger.critical("Дирректроия неверная!")





